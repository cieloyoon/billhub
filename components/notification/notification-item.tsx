'use client'

import { useState, useMemo } from 'react'
import Link from 'next/link'
import { formatDistanceToNow } from 'date-fns'
import { ko } from 'date-fns/locale'
import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import { useNotifications, type Notification } from '@/contexts/notification-context'
import { cn } from '@/lib/utils'
import { Eye, ExternalLink, Clock, FileText, Trash2 } from 'lucide-react'

interface NotificationItemProps {
  notification: Notification
}

export function NotificationItem({ notification: initialNotification }: NotificationItemProps) {
  const [isMarking, setIsMarking] = useState(false)
  const [isDeleting, setIsDeleting] = useState(false)
  const { markAsRead, deleteNotification, notifications } = useNotifications()
  
  // ÌòÑÏû¨ ÏÉÅÌÉúÏùò ÏïåÎ¶º Îç∞Ïù¥ÌÑ∞Î•º Í∞ÄÏ†∏Ïò§Í∏∞ (Ïã§ÏãúÍ∞Ñ ÏóÖÎç∞Ïù¥Ìä∏ Î∞òÏòÅ)
  const notification = useMemo(() => {
    const currentNotification = notifications.find(n => n.id === initialNotification.id)
    console.log('üîÑ ÏïåÎ¶º ÏÉÅÌÉú Ï≤¥ÌÅ¨:', {
      id: initialNotification.id,
      initial_is_read: initialNotification.is_read,
      current_is_read: currentNotification?.is_read,
      found: !!currentNotification,
      notifications_length: notifications.length
    })
    return currentNotification || initialNotification
  }, [notifications, initialNotification])

  // ÏïåÎ¶ºÏù¥ ÏÇ≠Ï†úÎêòÏóàÏúºÎ©¥ Ïª¥Ìè¨ÎÑåÌä∏Î•º Î†åÎçîÎßÅÌïòÏßÄ ÏïäÏùå
  if (notifications.length > 0 && !notifications.find(n => n.id === initialNotification.id)) {
    console.log('üö´ ÏÇ≠Ï†úÎêú ÏïåÎ¶ºÏù¥ÎØÄÎ°ú Î†åÎçîÎßÅ ÏïàÌï®:', initialNotification.id)
    return null
  }

  const handleMarkAsRead = async (e: React.MouseEvent) => {
    e.preventDefault()
    e.stopPropagation()
    
    console.log('üñ±Ô∏è ÏùΩÏùå Î≤ÑÌäº ÌÅ¥Î¶≠:', { 
      id: notification.id, 
      title: notification.title,
      is_read: notification.is_read,
      isMarking 
    })
    
    if (notification.is_read) {
      console.log('‚ö†Ô∏è Ïù¥ÎØ∏ ÏùΩÏùå ÏÉÅÌÉú')
      return
    }
    
    if (isMarking) {
      console.log('‚ö†Ô∏è Ïù¥ÎØ∏ Ï≤òÎ¶¨ Ï§ë')
      return
    }

    setIsMarking(true)
    try {
      console.log('üîÑ markAsRead Ìò∏Ï∂ú ÏãúÏûë')
      await markAsRead(notification.id)
      console.log('‚úÖ markAsRead ÏÑ±Í≥µ')
    } catch (error) {
      console.error('‚ùå ÏïåÎ¶º ÏùΩÏùå Ï≤òÎ¶¨ Ïò§Î•ò:', error)
    } finally {
      setIsMarking(false)
      console.log('üèÅ Ï≤òÎ¶¨ ÏôÑÎ£å, isMarking = false')
    }
  }

  const handleClick = async () => {
    // ÌÅ¥Î¶≠ Ïãú ÏûêÎèôÏúºÎ°ú ÏùΩÏùå Ï≤òÎ¶¨
    if (!notification.is_read) {
      try {
        await markAsRead(notification.id)
      } catch (error) {
        console.error('ÏïåÎ¶º ÏùΩÏùå Ï≤òÎ¶¨ Ïò§Î•ò:', error)
      }
    }
  }

  const handleDelete = async (e: React.MouseEvent) => {
    e.preventDefault()
    e.stopPropagation()
    
    console.log('üóëÔ∏è ÏÇ≠Ï†ú Î≤ÑÌäº ÌÅ¥Î¶≠:', { 
      id: notification.id, 
      title: notification.title,
      isDeleting 
    })
    
    if (isDeleting) {
      console.log('‚ö†Ô∏è Ïù¥ÎØ∏ ÏÇ≠Ï†ú Ï§ë')
      return
    }

    setIsDeleting(true)
    try {
      console.log('üîÑ deleteNotification Ìò∏Ï∂ú ÏãúÏûë')
      await deleteNotification(notification.id)
      console.log('‚úÖ deleteNotification ÏÑ±Í≥µ')
      // ÏÇ≠Ï†ú ÏÑ±Í≥µ Ïãú Ïª¥Ìè¨ÎÑåÌä∏Í∞Ä Ïñ∏ÎßàÏö¥Ìä∏ÎêòÎØÄÎ°ú finallyÎäî Ïã§ÌñâÎêòÏßÄ ÏïäÏùÑ Ïàò ÏûàÏùå
    } catch (error) {
      console.error('‚ùå ÏïåÎ¶º ÏÇ≠Ï†ú Ïò§Î•ò:', error)
      // ÏóêÎü¨ Î∞úÏÉù Ïãú ÏÇ¨Ïö©ÏûêÏóêÍ≤å ÏïåÎ¶º (ÏÑ†ÌÉùÏÇ¨Ìï≠)
      // 404 ÏóêÎü¨ÎÇò "Ï∞æÏùÑ Ïàò ÏóÜÏùå" ÏóêÎü¨Îäî Î¨¥Ïãú
      if (error instanceof Error && 
          !error.message.includes('404') && 
          !error.message.includes('not found')) {
        // Ïã§Ï†ú ÏóêÎü¨Îßå ÌëúÏãú
        alert('ÏïåÎ¶º ÏÇ≠Ï†ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.')
      }
    } finally {
      console.log('üèÅ ÏÇ≠Ï†ú Ï≤òÎ¶¨ ÏôÑÎ£å')
      // Ïª¥Ìè¨ÎÑåÌä∏Í∞Ä Ïó¨Ï†ÑÌûà ÎßàÏö¥Ìä∏ÎêòÏñ¥ ÏûàÏùÑ ÎïåÎßå ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
      setTimeout(() => {
        setIsDeleting(false)
      }, 100)
    }
  }

  const getNotificationTypeText = (type: string) => {
    switch (type) {
      case 'stage_change':
        return 'Îã®Í≥Ñ Î≥ÄÍ≤Ω'
      case 'general_result':
        return 'Ï≤òÎ¶¨ Í≤∞Í≥º'
      default:
        return 'ÏïåÎ¶º'
    }
  }

  const getNotificationTypeBadgeVariant = (type: string) => {
    switch (type) {
      case 'stage_change':
        return 'default' as const
      case 'general_result':
        return 'secondary' as const
      default:
        return 'outline' as const
    }
  }

  // ÎßàÌÅ¨Îã§Ïö¥ Î≥ºÎìú Ï≤òÎ¶¨Î•º HTMLÎ°ú Î≥ÄÌôò
  const formatMessage = (message: string) => {
    return message.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
  }

  return (
    <Link href={`/bill/${notification.bill_id}`} onClick={handleClick}>
      <div
        className={cn(
          "group p-6 hover:bg-gray-50/50 transition-all duration-200 cursor-pointer",
          notification.is_read 
            ? "" 
            : "",
          isDeleting && "opacity-50 pointer-events-none"
        )}
      >
        <div className="flex items-start gap-4">
          {/* ÏïåÎ¶º ÏïÑÏù¥ÏΩò */}
          <div className={cn(
            "w-10 h-10 rounded-full flex items-center justify-center flex-shrink-0 transition-colors",
            notification.is_read 
              ? "bg-gray-100" 
              : "bg-green-100"
          )}>
            <FileText className={cn(
              "w-5 h-5",
              notification.is_read ? "text-gray-500" : "text-green-600"
            )} />
          </div>

          <div className="flex-1 min-w-0">
            {/* Ìó§Îçî */}
            <div className="flex items-center gap-3 mb-3">
              <Badge 
                variant={getNotificationTypeBadgeVariant(notification.notification_type)}
                className="text-xs font-medium"
              >
                {getNotificationTypeText(notification.notification_type)}
              </Badge>
              {!notification.is_read && (
                <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse" />
              )}
              <div className="flex items-center gap-1 text-xs text-gray-500 ml-auto">
                <Clock className="w-3 h-3" />
                {formatDistanceToNow(new Date(notification.sent_at), {
                  addSuffix: true,
                  locale: ko
                })}
              </div>
            </div>
            
            {/* Ï†úÎ™© */}
            <h3 className={cn(
              "font-semibold mb-2 line-clamp-1",
              notification.is_read ? "text-gray-700" : "text-gray-900"
            )}>
              {notification.title}
            </h3>
            
            {/* Î©îÏãúÏßÄ ÎÇ¥Ïö© */}
            <div 
              className={cn(
                "text-sm mb-3 line-clamp-4 whitespace-pre-line leading-relaxed",
                notification.is_read ? "text-gray-500" : "text-gray-700"
              )}
              dangerouslySetInnerHTML={{ __html: formatMessage(notification.message) }}
            />
            
            {/* Î≤ïÏïà Ï†ïÎ≥¥ */}
            {notification.bills && (
              <div className="flex items-center gap-2 text-xs text-gray-500 mb-3 p-2 bg-gray-50 rounded-md">
                <FileText className="w-3 h-3 flex-shrink-0" />
                <span className="font-medium">{notification.bills.bill_no}</span>
                <span className="text-gray-400">|</span>
                <span className="line-clamp-1">{notification.bills.bill_name}</span>
              </div>
            )}
            
            {/* ÏÇ≠Ï†ú Ï§ëÏùº Îïå Î©îÏãúÏßÄ ÌëúÏãú */}
            {isDeleting && (
              <div className="flex items-center gap-2 text-sm text-orange-600 mb-3 px-2 py-1 bg-orange-50 rounded-md">
                <div className="animate-spin rounded-full h-3 w-3 border-b border-orange-600" />
                <span>ÏÇ≠Ï†ú Ï§ë...</span>
              </div>
            )}
            
            {/* Ïï°ÏÖò Î≤ÑÌäºÎì§ */}
            <div className="flex items-center justify-end gap-2">
              {!notification.is_read && !isDeleting && (
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={handleMarkAsRead}
                  disabled={isMarking}
                  className="text-xs h-7 px-2 hover:bg-green-100 hover:text-green-700"
                >
                  {isMarking ? (
                    <div className="animate-spin rounded-full h-3 w-3 border-b border-current" />
                  ) : (
                    <>
                      <Eye className="h-3 w-3 mr-1" />
                      ÏùΩÏùå
                    </>
                  )}
                </Button>
              )}
              {!isDeleting && (
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={handleDelete}
                  disabled={isDeleting}
                  className="text-xs h-7 px-2 hover:bg-red-100 hover:text-red-700"
                >
                  <Trash2 className="h-3 w-3 mr-1" />
                  ÏÇ≠Ï†ú
                </Button>
              )}
            </div>
          </div>
        </div>
      </div>
    </Link>
  )
} 